@page "/"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using Microsoft.AspNetCore.SignalR.Client
@using QRCoder

@inject NavigationManager Navigation

@implements IAsyncDisposable

<PageTitle>Share</PageTitle>

<div class="container">
    <div class="row justify-content-md-center">
        <div class="col-md-auto">
            @((MarkupString)svg)
        </div>
    </div>
    <div class="row">
        <label for="msgText" class="form-label">Message</label>
        <textarea class="form-control" @bind="messageInput"  id="msgText" rows="3"></textarea>
    </div>
    <div class="row">
        <button class="btn btn-primary" @onclick="Send" disabled="@(!IsConnected)">Send</button>
    </div>
</div>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>


@code {
    private HubConnection? hubConnection;

    private List<string> messages = new List<string>();
    private string? messageInput;
    private string svg = string.Empty;

    [SupplyParameterFromQuery(Name = "sessionId")]
    private string? SessionId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (SessionId is null)
        {
            SessionId = Guid.NewGuid().ToString();
        }

        var newUri = $"?sessionId={SessionId}";

        Navigation.NavigateTo(newUri, forceLoad: false, replace: true);

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .WithStatefulReconnect()
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("ReceiveGroupMessage", (message) =>
        {
            var encodedMsg = $"{message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        QRCodeGenerator qrGenerator = new QRCodeGenerator();
        QRCodeData qrCodeData = qrGenerator.CreateQrCode(Navigation.Uri, QRCodeGenerator.ECCLevel.Q);
        SvgQRCode qrCode = new SvgQRCode(qrCodeData);
        svg = qrCode.GetGraphic(5);

        await hubConnection.SendAsync("AddToGroup", SessionId);
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessageToGroup", SessionId, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("RemoveFromGroup", SessionId);
            await hubConnection.DisposeAsync();
        }
    }
}